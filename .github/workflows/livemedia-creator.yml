name: Build Nobara ISO
# An example of how to use livemedia-creator in GitHub Actions
# to build a custom Nobara ISO.


on:
  workflow_dispatch:
    inputs:
      # Force host version to match OS it's building.
      # Recommended since we use '--no-virt' in livemedia-creator
      # https://weldr.io/lorax/livemedia-creator.html#anaconda-image-install-no-virt
      nobara_release:
        description: 'Nobara release to build'
        required: true
        default: '41'
        type: number

      kickstart_path:
        description: 'Path to the kickstart file'
        required: true
        default: './ISO-ready-flattened-kickstarts/41/nv-flat-nobara-live-official-41.ks'
        type: string

jobs:

  nobara-build:
    runs-on: ubuntu-24.04
    container:
      image: "nobara:${{inputs.nobara_release}}"
        # --privileged needed for livemedia-creator
      options: --privileged
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
          # zstd: Lets you use github caching actions inside nobara too
          # pykickstart: To lint the kickstart file
          # lorax lorax-lmc-novirt anaconda: To actually build the ISO
        run: dnf install -y zstd lorax lorax-lmc-novirt anaconda pykickstart

      - name: Lint Kickstart file
        run: ksvalidator "${{ inputs.kickstart_path }}"

      ## Create the ISO
      - name: Create the custom ISO
          # --no-virt: Needed since we're in a container, no host CPU
          # --squashfs-only: Just to speed things up, not required
        run: |
          livemedia-creator \
            --ks "${{ inputs.kickstart_path }}" \
            --no-virt \
            --make-iso \
            --iso-only \
            --squashfs-only \
            --iso-name Nobara-Nvidia-Official-$(date +%F).iso \
            --project Nobara \
            --volid "Nobara-${{ inputs.nobara_release }}" \
            --releasever "${{ inputs.nobara_release }}" \
            --resultdir ./Results

      - name: Upload ISO
        uses: actions/upload-artifact@v4.3.1
        with:
          name: "Nobara-Nvidia-Official-${{inputs.nobara_release}}.iso"
          path: ./Results/*.iso
          overwrite: True

      ## Capture debug info if run fails, AND logs exist:
      - name: "DEBUG: Print program.log"
        if: failure() && hashFiles('./program.log') != ''
        run: |
          ls -hl ./program.log
          cat ./program.log

      - name: "DEBUG: Print livemedia.log"
        if: failure() && hashFiles('./livemedia.log') != ''
        run: |
          ls -hl ./program.log
          cat ./livemedia.log
